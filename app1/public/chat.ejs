<div class="container-fluid" style="padding: 0; margin: 0; height: 85vh;">
  <div class="row flex-column flex-sm-row" style="height: 100%;">
    
    <!-- รายชื่อ -->
    <div class="col-sm-4 col-12" style="background-color: lightgrey; height: 100%;">
      <div class="mx-4 mt-4">
        <h1>รายชื่อ</h1>
        <ul class="list-group" id="user-list">
            <% users.forEach(u => { %>
            <li class="list-group-item user-item " data-username="<%= u.username %>">
            <%= u.name %> (<%= u.username %>)
            </li>
            <% }) %>
        </ul>
      </div>
    </div>

    <!-- ระบบแชท -->
    <div class="col-sm-8 col-12 d-flex flex-column" style="height: 100%;">
      <div class="mt-4">
        <h1>ระบบแชทกับ <span id="chat-with">-</span></h1>
      </div>
      <div style="flex: 1; overflow-y: auto; padding: 10px; display: flex; flex-direction: column;" id="messages-container">
        <!-- ข้อความแชท -->
      </div>
      <form id="chat-form" class="d-flex align-items-center mb-2" style="gap: 10px;">
        <input id="message-input" autocomplete="off" placeholder="พิมพ์ข้อความ..." class="form-control form-control-chat" style="width: 90%;">
        <button class="form-control form-control-chat btn btn-primary" style="width: 8%;">ส่ง</button>
      </form>
    </div>

  </div>
</div>

<script>
  const socket = io({ query: { username: "<%= user.username %>" } });

  const userList = document.getElementById('user-list');
  const chatWithEl = document.getElementById('chat-with');
  const messagesContainer = document.getElementById('messages-container');
  const chatForm = document.getElementById('chat-form');
  const messageInput = document.getElementById('message-input');

  let currentChatUser = null;

  // เลือกชื่อเพื่อแชท
  userList.addEventListener('click', e => {
    const li = e.target.closest('.user-item');
    if (!li) return;

    const username = li.dataset.username;
    if (username === currentChatUser) return;

    currentChatUser = username;
    chatWithEl.textContent = username;
    messagesContainer.innerHTML = '';
    messageInput.disabled = false;

    // โหลดข้อความจาก server
    fetch(`/chat/messages/${username}`)
      .then(res => res.json())
      .then(data => {
        data.messages.forEach(addMessage);
      });
  });

  // เพิ่มข้อความลงหน้าจอ
  function addMessage(msg) {
    const div = document.createElement('div');
    if (msg.sender === "<%= user.username %>") {
    div.classList.add('chat-messages-sent', 'mb-2');
  } else {
    div.classList.add('chat-messages-recieived', 'mb-2');
  }
  div.textContent = msg.text;
  messagesContainer.appendChild(div);
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
}

  // รับข้อความใหม่
  socket.on("chat message", msg => {
  // ถ้าไม่ได้เลือก user แต่อีกฝั่งพิมพ์มา
  if (!currentChatUser && msg.sender !== "<%= user.username %>") {
    currentChatUser = msg.sender;
    chatWithEl.textContent = msg.sender;
    messageInput.disabled = false;
  }

  if (
    (msg.sender === "<%= user.username %>" && msg.receiver === currentChatUser) ||
    (msg.sender === currentChatUser && msg.receiver === "<%= user.username %>")
  ) {
    addMessage(msg);
  }
});

  // ส่งข้อความ
  chatForm.addEventListener("submit", (e) => {
  e.preventDefault();
  if (!currentChatUser) return alert("กรุณาเลือกคนคุยก่อน");
  const text = messageInput.value.trim();
  if (!text) return;

  const msg = {
    from: "<%= user.username %>",
    to: currentChatUser,
    text
  };

  // แสดงข้อความตัวเองก่อนเลย
  addMessage({ sender: msg.from, text });

  socket.emit("chat message", msg);
  messageInput.value = "";
});
</script>

